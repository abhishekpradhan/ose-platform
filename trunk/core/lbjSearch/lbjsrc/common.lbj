package lbj.common;
import lbjse.objectsearch.*;
import java.util.*;
import LBJ2.classify.*;
import common.GenericPair;

discrete{false, true} Oracle(DocQueryPair dq) <-
{
  return dq.oracle();
}

discrete{false, true} PairOracle(GenericPair pairs) <-
{
    return Utils.oracle(pairs);
}

discrete% WordsInTitle(DocQueryPair dq) <-
{
	Collection c = dq.getDoc().getTokenizedTitle(); 
	for (Iterator it = c.iterator(); it.hasNext(); )
		sense "" : ((String) it.next()).toLowerCase(); 
}

  

discrete% WordsInTitle_InDict(DocQueryPair dq) <-
{
	Collection c = dq.getDoc().getTokenizedTitle();
	for (Iterator it = c.iterator(); it.hasNext(); ){
		String w = ((String) it.next()).toLowerCase();
		if (WordDict.contains(w))
			sense "" : w; 
	}
}  


discrete% WordsInBody(DocQueryPair dq) <-
{
	Collection c = dq.getDoc().getTokenizedBody();
	for (Iterator it = c.iterator(); it.hasNext(); )
		sense "" : ((String) it.next()).toLowerCase(); 
}  

discrete% WordsInBody_InDict(DocQueryPair dq) <-
{
	Collection c = dq.getDoc().getTokenizedBody();
	for (Iterator it = c.iterator(); it.hasNext(); ){
		String w = ((String) it.next()).toLowerCase();
		if (WordDict.contains(w))
			sense "" : w; 
	}
}  

discrete% BigramWordsInBody_InDict(DocQueryPair dq) <-
{
	Collection c = dq.getDoc().getTokenizedBody();
	String previous = null;
	for (Iterator it = c.iterator(); it.hasNext(); ){
		String w = ((String) it.next()).toLowerCase();
		if (WordDict.contains(w)){
			if (previous != null)
				sense "" : previous + "_" + w;
			previous = w; 
		}
	}
}  

discrete% WordsInTitleInLists(DocQueryPair dq) <-
{
	Collection c = dq.getDoc().getTokenizedTitle();

	for (Iterator it = c.iterator(); it.hasNext(); )
  {
    String word = (String) it.next();
    LinkedList lists = ListMembership.containedIn(word.toLowerCase());
    //if (lists.size() == 0) sense "No" : word;
    for (Iterator I = lists.iterator(); I.hasNext(); )
      sense "" : I.next();
  }
}  

discrete% WordsInBodyInLists(DocQueryPair dq) <-
{
	Collection c = dq.getDoc().getTokenizedBody();

	for (Iterator it = c.iterator(); it.hasNext(); )
  {
    String word = (String) it.next();
    LinkedList lists = ListMembership.containedIn(word.toLowerCase());
    //if (lists.size() == 0) sense "No" : word;
    for (Iterator I = lists.iterator(); I.hasNext(); )
      sense "" : I.next();
  }
}  